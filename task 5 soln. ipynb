{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0bd5802f-6a7b-47c9-888d-f01c143497c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.tree import DecisionTreeClassifier, plot_tree\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "066fc3cb-6173-4c22-8c9d-9fdd7a2c88f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"C:/Users/A/Downloads/heart.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0b7d752d-5384-4c38-aa68-5acd1ca07ddd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
      "0   52    1   0       125   212    0        1      168      0      1.0      2   \n",
      "1   53    1   0       140   203    1        0      155      1      3.1      0   \n",
      "2   70    1   0       145   174    0        1      125      1      2.6      0   \n",
      "3   61    1   0       148   203    0        1      161      0      0.0      2   \n",
      "4   62    0   0       138   294    1        1      106      0      1.9      1   \n",
      "\n",
      "   ca  thal  target  \n",
      "0   2     3       0  \n",
      "1   0     3       0  \n",
      "2   0     3       0  \n",
      "3   1     3       0  \n",
      "4   3     2       0  \n"
     ]
    }
   ],
   "source": [
    "print(df.head())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "acfb344b-676e-4102-a6da-2e72ffaf7ba5",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('target', axis=1)\n",
    "y = df['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ecca9cc5-1a76-4699-8998-7e475b17223a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d3100248-e99a-41a3-b85c-6b8f9d174a80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(random_state=42)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = DecisionTreeClassifier(random_state=42)\n",
    "dt.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "81ad62fb-2b14-4ca6-b9b4-62e86de3f8f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Decision Tree Accuracy: 0.9853658536585366\n",
      "\n",
      "Confusion Matrix:\n",
      " [[102   0]\n",
      " [  3 100]]\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      1.00      0.99       102\n",
      "           1       1.00      0.97      0.99       103\n",
      "\n",
      "    accuracy                           0.99       205\n",
      "   macro avg       0.99      0.99      0.99       205\n",
      "weighted avg       0.99      0.99      0.99       205\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred_dt = dt.predict(X_test)\n",
    "print(\"\\nDecision Tree Accuracy:\", accuracy_score(y_test, y_pred_dt))\n",
    "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred_dt))\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred_dt))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "80f13bdc-dc8d-48db-9e85-5ba306709292",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Decision Tree Accuracy: 0.9853658536585366\n",
      "\n",
      "Confusion Matrix:\n",
      " [[102   0]\n",
      " [  3 100]]\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      1.00      0.99       102\n",
      "           1       1.00      0.97      0.99       103\n",
      "\n",
      "    accuracy                           0.99       205\n",
      "   macro avg       0.99      0.99      0.99       205\n",
      "weighted avg       0.99      0.99      0.99       205\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred_dt = dt.predict(X_test)\n",
    "print(\"\\nDecision Tree Accuracy:\", accuracy_score(y_test, y_pred_dt))\n",
    "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred_dt))\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred_dt))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cf81b662-979c-4ad9-813e-c0e2263d22e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_accuracies = []\n",
    "test_accuracies = []\n",
    "depths = range(1, 21)\n",
    "\n",
    "for d in depths:\n",
    "    tree = DecisionTreeClassifier(max_depth=d, random_state=42)\n",
    "    tree.fit(X_train, y_train)\n",
    "    train_accuracies.append(tree.score(X_train, y_train))\n",
    "    test_accuracies.append(tree.score(X_test, y_test))\n",
    "\n",
    "plt.plot(depths, train_accuracies, label='Train Accuracy')\n",
    "plt.plot(depths, test_accuracies, label='Test Accuracy')\n",
    "plt.xlabel('Tree Depth')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Overfitting Analysis by Tree Depth')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d6014a0e-97db-4615-9bdf-bb58973c3457",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "974fee14-5891-4ab9-bf51-10b66f096a6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Random Forest Accuracy: 0.9853658536585366\n",
      "\n",
      "Confusion Matrix:\n",
      " [[102   0]\n",
      " [  3 100]]\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      1.00      0.99       102\n",
      "           1       1.00      0.97      0.99       103\n",
      "\n",
      "    accuracy                           0.99       205\n",
      "   macro avg       0.99      0.99      0.99       205\n",
      "weighted avg       0.99      0.99      0.99       205\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_pred_rf = rf.predict(X_test)\n",
    "print(\"\\nRandom Forest Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
    "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred_rf))\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2a34bd94-7706-4fac-8c2f-fff0de401fb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "importances = rf.feature_importances_\n",
    "feature_names = X.columns\n",
    "feat_imp_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})\n",
    "feat_imp_df.sort_values(by='Importance', ascending=False, inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0f4bacc4-405a-4b54-b48a-3e7de2ad71a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,6))\n",
    "sns.barplot(x='Importance', y='Feature', data=feat_imp_df)\n",
    "plt.title('Feature Importances - Random Forest')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0b0ce1a0-e8de-4809-8c3f-636566ce05bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-Validation Accuracy Scores: [1.         1.         1.         1.         0.98536585]\n",
      "Mean CV Accuracy: 0.9970731707317073\n"
     ]
    }
   ],
   "source": [
    "cv_scores = cross_val_score(rf, X, y, cv=5)\n",
    "print(\"Cross-Validation Accuracy Scores:\", cv_scores)\n",
    "print(\"Mean CV Accuracy:\", np.mean(cv_scores))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "105579dd-f610-45a5-813e-afa77b3d412d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
